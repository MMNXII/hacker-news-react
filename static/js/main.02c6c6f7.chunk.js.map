{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Header","HeadingDiv","Heading","Search","onSearch","htmlFor","id","type","onChange","List","stories","map","item","key","objectID","href","url","title","author","num_comments","points","styled","div","h1","App","useState","searchTerm","setSearchTerm","searchedStories","filter","story","includes","event","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+fAIA,IA2CMA,EAAS,kBACb,kBAACC,EAAD,KACE,kBAACC,EAAD,4BAIEC,EAAS,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChB,OACE,6BACE,2BAAOC,QAAQ,UAAf,YACA,2BAAOC,GAAG,SAASC,KAAK,OAAOC,SAAUJ,MAKzCK,EAAO,SAAC,GAAD,SAAGC,QACNC,KAAI,SAACC,GAAD,OACV,yBAAKC,IAAKD,EAAKE,UACb,8BACE,uBAAGC,KAAMH,EAAKI,KAAMJ,EAAKK,QAE3B,8BAAOL,EAAKM,QACZ,8BAAON,EAAKO,cACZ,8BAAOP,EAAKQ,aAKZnB,EAAaoB,IAAOC,IAAV,KAGVpB,EAAUmB,IAAOE,GAAV,KAMEC,EAhFH,WACV,IADgB,EAoBoBC,mBAAS,IApB7B,mBAoBTC,EApBS,KAoBGC,EApBH,KA0BVC,EAzBU,CACd,CACEX,MAAO,QACPD,IAAK,uBACLE,OAAQ,eACRC,aAAc,EACdC,OAAQ,EACRN,SAAU,GAEZ,CACEG,MAAO,QACPD,IAAK,wBACLE,OAAQ,4BACRC,aAAc,EACdC,OAAQ,EACRN,SAAU,IAUkBe,QAAO,SAACC,GACtC,OAAOA,EAAMb,MAAMc,SAASL,MAG9B,OACE,6BACE,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAAQtB,SAZS,SAAC4B,GACpBL,EAAcK,EAAMC,OAAOC,UAazB,6BAEA,kBAAC,EAAD,CAAMxB,QAASkB,MC9BDO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.02c6c6f7.chunk.js","sourcesContent":["import React, { div, useState } from 'react';\nimport './App.css';\nimport styled from 'styled-components';\n\nconst App = () => {\n  const stories = [\n    {\n      title: 'React',\n      url: 'https://reactjs.org/',\n      author: 'Jordan Walke',\n      num_comments: 3,\n      points: 4,\n      objectID: 0,\n    },\n    {\n      title: 'Redux',\n      url: 'https://redux.js.org/',\n      author: 'Dan Abramov, Andrew Clark',\n      num_comments: 2,\n      points: 5,\n      objectID: 1,\n    },\n  ];\n\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const handleSearch = (event) => {\n    setSearchTerm(event.target.value);\n  };\n\n  const searchedStories = stories.filter((story) => {\n    return story.title.includes(searchTerm);\n  });\n\n  return (\n    <div>\n      <Header />\n\n      <Search onSearch={handleSearch} />\n\n      <hr />\n\n      <List stories={searchedStories} />\n    </div>\n  );\n};\n\nconst Header = () => (\n  <HeadingDiv>\n    <Heading>My Hacker Stories</Heading>\n  </HeadingDiv>\n);\n\nconst Search = ({ onSearch }) => {\n  return (\n    <div>\n      <label htmlFor='search'>Search: </label>\n      <input id='search' type='text' onChange={onSearch} />\n    </div>\n  );\n};\n\nconst List = ({ stories }) =>\n  stories.map((item) => (\n    <div key={item.objectID}>\n      <span>\n        <a href={item.url}>{item.title}</a>\n      </span>\n      <span>{item.author}</span>\n      <span>{item.num_comments}</span>\n      <span>{item.points}</span>\n    </div>\n  ));\n\n///////Styles///////\nconst HeadingDiv = styled.div`\n  background-color: #cbc1de;\n`;\nconst Heading = styled.h1`\n  text-align: center;\n  color: #31234a;\n  font-size: 4em;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}