{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["initialStories","title","url","author","num_comments","points","objectID","Header","HeadingDiv","Heading","SearchText","label","InputWithLabel","type","id","value","onInputChange","isFocused","children","inputRef","useRef","React","useEffect","current","focus","htmlFor","ref","onChange","List","stories","onRemoveItem","map","item","key","Item","href","Button","onClick","styled","button","div","h1","App","initialState","useState","localStorage","getItem","setValue","setItem","useSemiPersistentState","searchTerm","setSearchTerm","setStories","searchedStories","filter","story","toLowerCase","includes","event","target","newStories","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4rBAIA,IAAMA,EAAiB,CACrB,CACEC,MAAO,QACPC,IAAK,uBACLC,OAAQ,eACRC,aAAc,EACdC,OAAQ,EACRC,SAAU,GAEZ,CACEL,MAAO,QACPC,IAAK,wBACLC,OAAQ,4BACRC,aAAc,EACdC,OAAQ,EACRC,SAAU,IAsDRC,EAAS,kBACb,kBAACC,EAAD,KACE,kBAACC,EAAD,4BAIEC,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACjB,oCACE,2BAAIA,KAIFC,EAAiB,SAAC,GAOjB,IAAD,IANJC,YAMI,MANG,OAMH,EALJC,EAKI,EALJA,GACAC,EAII,EAJJA,MACAC,EAGI,EAHJA,cACAC,EAEI,EAFJA,UACAC,EACI,EADJA,SAEMC,EAAWC,mBAQjB,OANAC,IAAMC,WAAU,WACVL,GAAaE,EAASI,SACxBJ,EAASI,QAAQC,UAElB,CAACP,IAGF,oCACE,2BAAOQ,QAASX,GAAKI,GACrB,2BACEQ,IAAKP,EACLN,KAAMA,EACNE,MAAOA,EACPD,GAAIA,EACJa,SAAUX,MAMZY,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,aAAZ,OACXD,EAAQE,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,CAAMC,IAAKD,EAAK1B,SAAU0B,KAAMA,EAAMF,aAAcA,QAGlDI,EAAO,SAAC,GAAD,IAAGF,EAAH,EAAGA,KAAMF,EAAT,EAASA,aAAT,OACX,6BACE,8BACE,uBAAGK,KAAMH,EAAK9B,KAAM8B,EAAK/B,QAE3B,8BAAO+B,EAAK7B,QACZ,8BAAO6B,EAAK5B,cACZ,8BAAO4B,EAAK3B,QACZ,8BACE,kBAAC+B,EAAD,CAAQvB,KAAK,SAASwB,QAAS,kBAAMP,EAAaE,KAAlD,cASAI,EAASE,IAAOC,OAAV,KAMN/B,EAAa8B,IAAOE,IAAV,KAGV/B,EAAU6B,IAAOG,GAAV,KAOEC,EAzHH,WAAO,IAAD,EAVa,SAACT,EAAKU,GAAkB,IAAD,EAC1BC,mBAASC,aAAaC,QAAQb,IAAQU,GADZ,mBAC7C5B,EAD6C,KACtCgC,EADsC,KAOpD,OAJAzB,qBAAU,WACRuB,aAAaG,QAAQf,EAAKlB,KACzB,CAACA,EAAOkB,IAEJ,CAAClB,EAAOgC,GAIqBE,CAAuB,SAAU,SADrD,mBACTC,EADS,KACGC,EADH,OAGcP,mBAAS5C,GAHvB,mBAGT6B,EAHS,KAGAuB,EAHA,KAgBVC,EAAkBxB,EAAQyB,QAAO,SAACC,GAAD,OACrCA,EAAMtD,MAAMuD,cAAcC,SAASP,EAAWM,kBAGhD,OACE,6BACE,kBAAC,EAAD,MAEA,kBAAC,EAAD,CACE1C,GAAG,SACHC,MAAOmC,EACPlC,cAfe,SAAC0C,GACpBP,EAAcO,EAAMC,OAAO5C,QAevBE,WAAS,GAET,kBAAC,EAAD,CAAYN,MAAM,cAGpB,6BAEA,kBAAC,EAAD,CAAMkB,QAASwB,EAAiBvB,aA9BV,SAACE,GACzB,IAAM4B,EAAa/B,EAAQyB,QACzB,SAACC,GAAD,OAAWvB,EAAK1B,WAAaiD,EAAMjD,YAErC8C,EAAWQ,QC9BKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5c79ec9c.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport styled from 'styled-components';\n\nconst initialStories = [\n  {\n    title: 'React',\n    url: 'https://reactjs.org/',\n    author: 'Jordan Walke',\n    num_comments: 3,\n    points: 4,\n    objectID: 0,\n  },\n  {\n    title: 'Redux',\n    url: 'https://redux.js.org/',\n    author: 'Dan Abramov, Andrew Clark',\n    num_comments: 2,\n    points: 5,\n    objectID: 3,\n  },\n];\n\nconst useSemiPersistentState = (key, initialState) => {\n  const [value, setValue] = useState(localStorage.getItem(key) || initialState);\n\n  useEffect(() => {\n    localStorage.setItem(key, value);\n  }, [value, key]);\n\n  return [value, setValue];\n};\n\nconst App = () => {\n  const [searchTerm, setSearchTerm] = useSemiPersistentState('search', 'React');\n\n  const [stories, setStories] = useState(initialStories);\n\n  const handleRemoveStory = (item) => {\n    const newStories = stories.filter(\n      (story) => item.objectID !== story.objectID\n    );\n    setStories(newStories);\n  };\n\n  const handleSearch = (event) => {\n    setSearchTerm(event.target.value);\n  };\n\n  const searchedStories = stories.filter((story) =>\n    story.title.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  return (\n    <div>\n      <Header />\n\n      <InputWithLabel\n        id='search'\n        value={searchTerm}\n        onInputChange={handleSearch}\n        isFocused\n      >\n        <SearchText label='Search: ' />\n      </InputWithLabel>\n\n      <hr />\n\n      <List stories={searchedStories} onRemoveItem={handleRemoveStory} />\n    </div>\n  );\n};\n\nconst Header = () => (\n  <HeadingDiv>\n    <Heading>My Hacker Stories</Heading>\n  </HeadingDiv>\n);\n\nconst SearchText = ({ label }) => (\n  <>\n    <b>{label}</b>\n  </>\n);\n\nconst InputWithLabel = ({\n  type = 'text',\n  id,\n  value,\n  onInputChange,\n  isFocused,\n  children,\n}) => {\n  const inputRef = useRef();\n\n  React.useEffect(() => {\n    if (isFocused && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isFocused]);\n\n  return (\n    <>\n      <label htmlFor={id}>{children}</label>\n      <input\n        ref={inputRef}\n        type={type}\n        value={value}\n        id={id}\n        onChange={onInputChange}\n      />\n    </>\n  );\n};\n\nconst List = ({ stories, onRemoveItem }) =>\n  stories.map((item) => (\n    <Item key={item.objectID} item={item} onRemoveItem={onRemoveItem} />\n  ));\n\nconst Item = ({ item, onRemoveItem }) => (\n  <div>\n    <span>\n      <a href={item.url}>{item.title}</a>\n    </span>\n    <span>{item.author}</span>\n    <span>{item.num_comments}</span>\n    <span>{item.points}</span>\n    <span>\n      <Button type='button' onClick={() => onRemoveItem(item)}>\n        Dismiss\n      </Button>\n    </span>\n  </div>\n);\n\n///////Styles///////\n\nconst Button = styled.button`\n  padding: 5px;\n  background-color: #cbc1de;\n  margin-left: 1em;\n  border-radius: 10px;\n`;\nconst HeadingDiv = styled.div`\n  background-color: #cbc1de;\n`;\nconst Heading = styled.h1`\n  font-family: helvetica;\n  text-align: center;\n  color: #31234a;\n  font-size: 3em;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}